<?xml version="1.0"?>
<!--
	Joomla Extensions Directory build file for Phing

	Run "phing git" from the build directory to build everything except the docs
-->
<project name="JVP" description="Joomla Volunteers Portal" default="git">
    <!-- OS-dependent properties -->
    <property name="system.php_cli" value="php"/>
    <property name="bin.composer" value="composer.phar"/>

    <!-- Built in properties -->
    <property name="dirs.root" value="${phing.dir}/.."/>
    <property name="dirs.release" value="${dirs.root}/release"/>
    <property name="dirs.component" value="${dirs.root}/component"/>
    <property name="dirs.composer" value="${dirs.root}"/>

    <!-- Initialize the site parameter for relink with -Dsite=.... -->
    <property name="site" value="/var/www/mysite"/>

    <!-- ### Version numbers -->
    <property name="version" value="git"/>

    <!-- ### Personal overrides -->
    <property file="${phing.dir}/overrides.properties" override="true"/>
    <!-- ### Load OS-dependent overrides -->
    <property file="${phing.dir}/overrides.${host.os}.properties" override="true"/>

    <!-- Custom task definitions -->
    <includepath classpath="${phing.dir}"/>

    <taskdef name="xmlversion" classname="tasks.XmlVersionTask"/>
    <taskdef name="autoversion" classname="tasks.AutoVersionTask"/>
    <taskdef name="phpstormsources" classname="tasks.PhpStormSources"/>
    <taskdef name="relinksite" classname="tasks.RelinkSiteTask"/>
    <taskdef name="zipme" classname="tasks.ZipmeTask" />

    <fileset dir="${dirs.component}" id="component">
        <include name="backend/**"/>
        <include name="frontend/**"/>
        <include name="language/**"/>
        <include name="media/**"/>
        <include name="*"/>



        <!--<exclude name="media/something/**"/>-->
    </fileset>

    <!--
    Generate the installation packages. By default it generates a development build. You can pass a specific version
    number to make a numbered version release, e.g. `phing git -Dversion=1.2.3` to build version 1.2.3
    -->
    <target name="git" description="Makes packages"
            depends="new-release,setup-properties,component-packages">
    </target>

    <!--
    Set up the basic version and build properties required to build files
    -->
    <target name="setup-properties" description="Set up version and build properties">
        <!-- Initialize the build.date timestamp -->
        <tstamp>
            <format property="build.date" pattern="%Y-%m-%d"/>
        </tstamp>

        <!-- Initialize the version if it's not set -->
        <if>
            <equals arg1="${version}" arg2="git"/>
            <then>
                <autoversion workingCopy="${dirs.root}" propertyName="version"/>
            </then>
        </if>
    </target>

    <!--
    Creates the release directory afresh before building anything

    This task depends on link and composer-install to make sure that you have a sane environment before you start
    building a package.
    -->
    <target name="new-release" description="Create afresh the release directory"
            depends="composer-install">
        <delete dir="${dirs.release}" quiet="true" includeemptydirs="true"/>
        <mkdir dir="${dirs.release}"/>
    </target>

    <!--
    Installs Composer dependencies.

    It's highly recommended that you commit your composer.lock in the repository. It makes sure that all build machines
    install the same version of the dependencies as your development machine.

    By default we look for composer.json in the repository root. If you have it elsewhere please update the
    dirs.composer property in your build.properties or build.xml file.
    -->
    <target name="composer-install">
        <if>
            <available file="${dirs.composer}/composer.json" type="file"/>
            <then>
                <composer composer="${bin.composer}" command="install" php="${system.php_cli}">
                    <arg value="-d"/>
                    <arg path="${dirs.composer}"/>
                    <arg value="--no-dev"/>
                </composer>
            </then>
        </if>
    </target>

    <!--
    Symlink the component, modules and plugins to a Joomla! installation

    site        Absolute filesystem path to the Joomla! installation
    -->
    <target name="relink" description="Joomla! extension relinker">
        <!-- Initialize the site variable if it's not set -->
        <if>
            <equals arg1="${site}" arg2=""/>
            <then>
                <property name="site" value="${build.relink_site}" override="true"/>
            </then>
        </if>

        <relinksite site="${site}" repository="${dirs.root}"/>
    </target>

    <!--
    Builds the component installation ZIP package for you. Called by the `git` task.
    -->
    <target name="component-packages" depends="xml-version,package-com"/>

    <!--
    Modify the XML manifest files applying the build date and version
    -->
    <target name="xml-version" depends="setup-properties">

        <if>
            <and>
                <not>
                    <contains string="${version}" substring="rev"/>
                </not>
                <not>
                    <contains string="${version}" substring="dev"/>
                </not>
                <not>
                    <contains string="${version}" substring="git"/>
                </not>
                <not>
                    <contains string="${version}" substring="svn"/>
                </not>
            </and>
            <then>
                <xmlversion repository="${dirs.root}" version="${version}" date="${build.date}"/>
            </then>
        </if>
    </target>

    <!--
    Generates the component installation ZIP file
    -->
    <target name="package-com" description="Builds the component">
        <!-- Determine the name of the XML manifest template file, package file and the fileset reference ID -->
        <!-- XML Manifest name: something.xml -->
        <property name="build.template_xml" value="jed.xml"/>
        <!-- Package name: com_something.zip -->
        <property name="build.package_name" value="com_jed.zip"/>
        <!-- Fileset reference ID: component -->
        <property name="build.refid" value="component"/>

        <!-- Copy the XML manifest file -->
        <if>
            <available file="${phing.dir}/templates/${build.template_xml}" property="completely.ignored"/>
            <then>
                <copy file="${phing.dir}/templates/${build.template_xml}"
                      tofile="${dirs.component}/jed.xml" overwrite="true">
                    <filterchain>
                        <replacetokens begintoken="##" endtoken="##">
                            <token key="DATE" value="${build.date}"/>
                            <token key="VERSION" value="${version}"/>
                        </replacetokens>
                    </filterchain>
                </copy>
            </then>
        </if>

        <!-- Create the package ZIP file -->
        <zipme basedir="${dirs.component}" destfile="${dirs.release}/${build.package_name}" includeemptydirs="true">
            <fileset refid="${build.refid}"/>
        </zipme>
    </target>

    <!--
    Displays environment information
    -->
    <target name="info">
        <php function="php_ini_loaded_file" returnProperty="inifiles"/>
        <php function="php_ini_scanned_files" returnProperty="extrainifiles"/>

        <echo message="Phing v.${phing.version} running on ${os.name}"/>
        <echo message="Host OS ${host.os} release ${host.os.release} version ${host.os.version}"/>
        <echo message="PHP version: ${php.version}"/>
        <echo message="PHP ini file: ${inifiles}"/>
        <echo message="PHP additional ini files: ${extrainifiles}"/>
        <echo message="Host architecture ${host.arch} â€“ fstype ${host.fstype}"/>
        <echo message="Host domain ${host.domain}"/>
        <echo message="CWD ${application.startdir}"/>
        <echo message="phing.file ${phing.file}"/>
        <echo message="phing.home ${phing.home}"/>
        <echo message="phing.dir ${phing.dir}"/>
        <echo message="phing.project.name ${phing.project.name}"/>
        <echo message="project.basedir ${project.basedir}"/>
    </target>

    <!--
    Updates phpStorm's directory to namespace mapping.

    This is always needed when switching between Git branches as the mapping is reset in this case.
    -->
    <target name="phpstorm" description="Update PhpStorm's directory to namespace mapping">
        <phpstormsources repository="${dirs.root}"/>
    </target>
</project>